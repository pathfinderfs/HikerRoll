# Design document for HikerRoll

The goal of this application is to allow a hike leader to keep track of what participants are on a hike and when they have finished to ensure everyone safely made it out.

## Some design goals

* Make the barrier to use as low as possible. This means avoid forcing users to create accounts and log in if possible. And you also want to minimize the amount of typing user have to do between uses. Esspecially since this is a mobile first application.

* Since actions will not be behind a login, we need to be extra careful that the backend API cannot be abused to give users ability they wouldn't otherwise have and to not make it trivial to overwhelm the site with bogus entries.

* Because hikers are often out of cell service, the application should still work when there is no internet service. For example, the user should be able to end their participation in the hike and then have it automitically update the server when it gets service.

## Data Model

* Users have a name, phone number, license plate, emergency contact phone number and a uuid

* Trailheads have a unique name, lattitude and longitude. There are both built-in trailheads and ones created by users.

* Hikes have a uuid, name, an optional organization, trailhead, start time and date, Leader (a user where their name and phone number is shared with participants) and Participants whose contact information and hike status is shared with the leader.

We want the api to be restful.

Anybody can create a hike. When typing in hike name and trailhead names the app offers possible completions from its database, but the user is free to create their own. Hike name completions come from the user's past hikes and the organization's past hikes. Organization completions come from the organizations the Leader is a member. If they create a new trailhead, it will default to the lattitude and longiude of their current location but allows the user to override.

Creating a hike gives the leader two links: a link to pass on to participants and a link that let's whoever has the link to be the leader. If a user different than the original uses the leader link, the leader is updated to the new user.

Hike leaders can see the list of users and their contact information who have joined the hike (participants) and allows them to hide participants who have finished the hike and also to toggle whether the participant is still hiking. It also gives them the ability to download a CSV of all the participants of the hike.


* Provide the ability for hike leader to nominate a trailhead to be added to the database to be shared with all users.

Backend API Specification

PUT /api/hike/{hikeUUID}/participant/{participantUUID}
* Receives a status (active or finished) and updates the user's status on the hike to that new status

POST /api/hike/{hikeUUID}/participant
* Receives a user's information and hikeCode and adds them as a participant to the hike identified by the hikeUUID with an active status. It also records the time the user joined the hike. And lastly it returns the full hike information to the user except for the leaderCode.

GET /api/hike/{hikeUUID}/participant
* Returns a list of participants on the hike identified by the hikeUUID. Including their hike status. It should not return the user's UUID and instead should return a hike specific participant UUID.

GET /api/hike/{hikeUUID}
* Given the hikeUUID it returns the full hike details except for the leaderCode

PUT /api/hike/{hikeUUID}
* Given the hikeUUID and leaderCode this ends the hike by changing all participants to finished status and changing the hike status to ended.

POST /api/hike
* Receives hike and user/leader information and creates a new hike. If the user has not been seen before it will need to add the user first. It returns the complete hike information including the leaderCode.

GET /api/hike
* Given a lattitude and longitude it retrieves and returns hikes within a quarter mile of the coordinates.

GET /api/trailhead
* Given a partial trailhead name it returns a list of up to 5 partial matching trailheads

GET /api/hike/{userUUID}
* Given a partial hike name it returns a list of up to 5 partial matching hikes that are in the user's history.
